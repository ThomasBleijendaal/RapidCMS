<CascadingValue Value="@CustomLoginStatus" Name="CustomLoginStatus" IsFixed="true">
    <CascadingAuthenticationState>
        <Router AppAssembly="typeof(RapidCmsRouter).Assembly" AdditionalAssemblies="AdditionalAssemblies" PreferExactMatches="true">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData">
                    <NotAuthorized>
                        @if (!(context.User.Identity?.IsAuthenticated ?? false))
                        {
                            <LayoutView Layout="typeof(EmptyLayout)">
                                <Login CustomElement="CustomLoginScreen!" />
                            </LayoutView>
                        }
                        else
                        {
                            <LayoutView Layout="typeof(EmptyLayout)">
                                <p><strong>Unauthorized</strong></p>
                                <p>You are not authorized to view this data.</p>
                            </LayoutView>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <LayoutView Layout="typeof(EmptyLayout)">
                    <p><strong>Page not found</strong></p>
                    <p>Sorry, but there's nothing here!</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>
</CascadingValue>

@code {
    private RenderFragment? CustomLoginScreen { get; set; }
    private RenderFragment? CustomLoginStatus { get; set; }

    [Inject]
    private ILogin LoginRegistration { get; set; } = default!;

    [Parameter]
    public IEnumerable<Assembly>? AdditionalAssemblies { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        CustomLoginScreen = (await LoginRegistration.CustomLoginScreenRegistrationAsync())?.ToRenderFragment();
        CustomLoginStatus = (await LoginRegistration.CustomLoginStatusRegistrationAsync())?.ToRenderFragment();

        await base.OnParametersSetAsync();
    }
}
