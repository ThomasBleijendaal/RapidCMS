@inherits DisposableComponent

<a href="javascript:;" @onclick="OnLinkClick" class="@(_isActive ? "active" : "")">@ChildContent</a>

@code {
    private bool _isActive;

    [Inject] private IMediator Mediator { get; set; } = default!;

    [Inject] private INavigationStateProvider NavigationStateProvider { get; set; } = default!;

    [Parameter] public RenderFragment ChildContent { get; set; } = default!;

    [Parameter] public NavigationState NavigateTo { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DisposeWhenDisposing(Mediator.RegisterCallback<NavigationEventArgs>(LocationChangedAsync));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Mediator.GetLatestEventArgs<NavigationEventArgs>() is NavigationEventArgs @event)
        {
            await LocationChangedAsync(this, @event);
        }
    }

    private async Task LocationChangedAsync(object sender, NavigationEventArgs args)
    {
        await InvokeAsync(() =>
        {
            _isActive = args.NewState.Equals(NavigateTo);
            StateHasChanged();
        });
    }

    //private void OnLocationChanged(object? sender, PageStateModel model)
    //{
    //    _isActive = model.NewState.Equals(model);
    //    StateHasChanged();
    //}

    private void OnLinkClick(MouseEventArgs args)
    {
        // Mediator.NotifyEvent(this, new NavigationEventArgs(NewState));
        NavigationStateProvider.AppendNavigationState(NavigateTo);
    }
}