@inherits DisposableComponent

<div class="messages" @onclick="RemoveMessages">
    <div class="message-list">
        @foreach (var message in Messages)
        {
            <div class="@CssHelper.GetMessageClass(message.Type)" role="alert">
                @message.Content
            </div>
        }
    </div>
</div>

@code {
    private readonly List<MessageEventArgs> Messages = new List<MessageEventArgs>();

    [Inject] private IMediator Mediator { get; set; } = default!;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DisposeWhenDisposing(Mediator.RegisterCallback<MessageEventArgs>(OnMessageAsync));
    }

    private async Task OnMessageAsync(object sender, MessageEventArgs args)
    {
        await InvokeAsync(async () =>
        {
            Messages.Add(args);

            StateHasChanged();

            await Task.Delay(3000);

            if (Messages.Contains(args))
            {
                Messages.Remove(args);

                StateHasChanged();
            }
        });
    }

    void RemoveMessages()
    {
        Messages.Clear();
    }
}