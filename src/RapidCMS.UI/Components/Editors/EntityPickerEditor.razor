@using System.Threading

@inherits BaseDataEditor

@if (Options != null)
{
    var index = 0;

    var value = GetValueAsObject();

    <div class="form-control form-control-select-list block @(CssHelper.GetValidationClass(State))">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <button type="button" class="btn btn-light" @onclick="ResetViewAsync"><Icon Name="Refresh" /> Reset</button>
            </li>

            <li class="nav-item search">
                <div class="input-group">
                    <input type="search"
                           placeholder="Search.."
                           class="form-control"
                           value="@searchTerm"
                           @onchange="(args) => Search(((string?)args.Value) ?? string.Empty)" />
                    <div class="input-group-append">
                        <button class="btn"
                                @onclick="(args) => { searchTerm = string.Empty; Search(string.Empty); }">
                            <Icon Name="Cancel" />
                        </button>
                    </div>
                </div>
            </li>
        </ul>


        @foreach (var option in Options)
        {
            index++;

            <div class="form-check">
                <div class="row">
                    <div class="col">
                        <label class="form-check-label row" for="@group-option@(index)">
                            <input class="form-check-input"
                                   type="radio"
                                   value=@option.Id
                                   id="@group-option@(index)"
                                   name=@group
                                   checked=@(option.Id.Equals(value))
                                   disabled=@IsDisabled
                                   @onchange=@(async args => SetValueFromObject(option.Id)) />
                            @option.Labels.First()
                        </label>
                    </div>
                    @foreach (var label in option.Labels.Skip(1))
                    {
                        <div class="col">
                            <label class="form-check-label" for="@group-option@(index)">
                                @label
                            </label>
                        </div>
                    }
                </div>
            </div>
        }

        <Paginator CurrentPage="@currentPage"
                   MaxPage="@maxPage"
                   OnPageChanged="@PageChangedAsync" />
    </div>

    @foreach (var message in GetValidationMessages())
    {
        <div class="invalid-feedback">
            @message
        </div>
    }
}
@code {
    private string? searchTerm;
    private int currentPage = 1;
    private int? maxPage;

    private string group = Guid.NewGuid().ToString().Replace("-", "");

    private IEnumerable<IElement>? Options;
    private CancellationTokenSource cts = new CancellationTokenSource();

    protected override async Task OnInitializedAsync()
    {
        if (DataCollection != null)
        {
            DataCollection.OnDataChange += UpdateOptionsAsync;

            await DataCollection.SetEntityAsync(EditContext, Parent);
            await UpdateOptionsAsync();
        }
    }

    private async void UpdateOptionsAsync(object? sender, EventArgs args)
    {
        if (DataCollection == null)
        {
            return;
        }

        await InvokeAsync(async () =>
        {
            var currentValue = GetValueAsObject();

            await UpdateOptionsAsync();

            if (currentValue != null && Options != null && !Options.Any(x => x.Id.Equals(currentValue)))
            {
                SetValueFromObject(default!);
            }

            StateHasChanged();
        });
    }

    private async Task PageChangedAsync(int page)
    {
        currentPage = page;

        await UpdateOptionsAsync();
    }

    private async Task ResetViewAsync(MouseEventArgs args)
    {
        searchTerm = "";
        currentPage = 1;
        maxPage = null;

        await UpdateOptionsAsync();
    }

    private async Task UpdateOptionsAsync()
    {
        if (DataCollection == null)
        {
            return;
        }

        var query = Query.Create(10, currentPage, searchTerm, default);
        Options = await DataCollection.GetAvailableElementsAsync(query);

        if (query.MoreDataAvailable)
        {
            maxPage = null;
        }
        else
        {
            maxPage = currentPage;
        }
    }

    public override void Dispose()
    {
        base.Dispose();

        if (DataCollection != null)
        {
            DataCollection.OnDataChange -= UpdateOptionsAsync;
        }
    }

    async void Search(string searchValue)
    {
        cts.Cancel();
        cts = new CancellationTokenSource();

        await Task.Delay(300);

        if (!cts.IsCancellationRequested)
        {
            searchTerm = searchValue;

            await UpdateOptionsAsync();

            StateHasChanged();
        }
    }
}
