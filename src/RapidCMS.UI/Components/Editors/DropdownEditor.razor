@inherits BaseDataEditor
@attribute [Relation(RelationType.One)]

@if (Options != null)
{
    <select class="form-control @(CssHelper.GetValidationClass(State))"
            disabled=@IsDisabled
            @onchange=@OnChange
            value="@SelectedIndex">
        @if (IsNullable)
        {
            <option value="-1">&nbsp;</option>
        }
        @foreach (var (option, index) in Options.Select((o, i) => (o, i)))
        {
            <option value=@index>@option.Labels.First()</option>
        }
    </select>

    @foreach (var message in GetValidationMessages())
    {
        <div class="invalid-feedback">
            @message
        </div>
    }
}
@code {
    private IReadOnlyList<IElement>? Options;
    private int SelectedIndex = -1;

    private bool IsNotNullableValueType;
    private bool IsNullable;

    protected override async Task OnInitializedAsync()
    {
        if (DataCollection != null)
        {
            IsNotNullableValueType = Property.PropertyType.IsValueType && Nullable.GetUnderlyingType(Property.PropertyType) == null;
            IsNullable = !Property.PropertyType.IsValueType || !IsNotNullableValueType;

            var value = GetValueAsObject();

            await DataCollection.SetEntityAsync(EditContext, Parent);
            await UpdateOptionsAsync();

            SelectedIndex = Options?.FindIndex(option => option.Id.Equals(value)) ?? -1;

            if (SelectedIndex == -1)
            {
                // make dropdown nullable for current non-selection
                IsNullable = true;
            }
        }
    }

    protected override  async Task UpdateOptionsAsync()
    {
        if (DataCollection == null)
        {
            return;
        }

        await InvokeAsync(async () =>
        {
            var currentValue = GetValueAsObject();

            await UpdateOptionsAsync();

            if (Options != null)
            {
                if (currentValue != null && Options.Any(x => x.Id.Equals(currentValue)))
                {
                    var newIndex = Options.FindIndex(x => x.Id.Equals(currentValue));
                    if (newIndex.HasValue)
                    {
                        SelectedIndex = newIndex.Value;
                    }
                }
                else if (currentValue != null && !Options.Any(x => x.Id.Equals(currentValue)))
                {
                    await SetValueFromObjectAsync(default!);
                    SelectedIndex = -1;
                }
            }

            StateHasChanged();
        });
    }

    private async Task OnChange(ChangeEventArgs args)
    {
        var index = int.Parse(((string?)args.Value) ?? "");

        if (index == -1)
        {
            await SetValueFromObjectAsync(default!);
        }
        else if (Options != null)
        {
            await SetValueFromObjectAsync(Options.ElementAt(index).Id);
        }

        // reset nullable when option is selected
        if (IsNotNullableValueType && IsNullable)
        {
            IsNullable = false;

            StateHasChanged();
        }
    }
}