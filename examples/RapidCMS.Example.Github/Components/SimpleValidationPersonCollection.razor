
@inherits RapidCMS.UI.Components.Sections.BaseSection

<div class="content">
    <pre>
config.AddCollection&lt;ValidationPerson, LocalStorageRepository&lt;ValidationPerson>>("validation-person", "Validation Person", collection =>
{
    collection
        .SetTreeView(x => x.Name)
        .SetListView(view =>
        {
            view.AddDefaultButton(DefaultButtonType.New);

            view.AddRow(row =>
            {
                row.AddField(p => p.Id).SetName("ID");
                row.AddField(p => p.Name);

                row.AddDefaultButton(DefaultButtonType.Edit);
            });
        })
        .SetNodeEditor(editor =>
        {
            editor.AddDefaultButton(DefaultButtonType.SaveExisting, isPrimary: true);
            editor.AddDefaultButton(DefaultButtonType.SaveNew, isPrimary: true);

            editor.AddDefaultButton(DefaultButtonType.Delete);

            editor.AddSection(section =>
            {
                section.AddField(x => x.Id).SetType(EditorType.Readonly);
                section.AddField(x => x.Name);
                section.AddField(x => x.Email);
            });

            editor.AddSection(section =>
            {
                section.AddField(x => x.Bio).SetType(EditorType.TextArea);
            });

            editor.AddSection(typeof(SimplePersonCollection));
        });
});
</pre>

    <pre>
internal class ValidationPerson : IEntity, ICloneable
{
    public string? Id { get; set; }

    [Required]
    [MinLength(10)]
    public string? Name { get; set; }

    [EmailAddress]
    [Required]
    public string? Email { get; set; }

    [Required]
    [BioValidation]
    public string? Bio { get; set; }

    public object Clone()
    {
        return new ValidationPerson
        {
            Bio = Bio,
            Email = Email,
            Id = Id,
            Name = Name
        };
    }
}
</pre>
</div>