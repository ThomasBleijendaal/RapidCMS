@using BlazorMonaco
@using Microsoft.AspNetCore.Components.Web
@using RapidCMS.Core.Abstractions.UI
@using RapidCMS.Extensions.Monaco
@using RapidCMS.UI.Components.Editors
@using RapidCMS.UI.Extensions

@inherits BasePropertyEditor
@implements IWantConfiguration<MonacoEditorConfiguration>

<div class="form-control form-control-monaco">
    @if (Config != null)
    {
        <MonacoEditor @ref="Editor" Id="@Id" ConstructionOptions="EditorConstructionOptions" OnKeyUp="ChangedAsync" />
    }
</div>

@code {
    public string Id = Guid.NewGuid().ToString();

    private MonacoEditorConfiguration? Config;

    private MonacoEditor? Editor { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Config = await this.GetConfigAsync<MonacoEditorConfiguration>()
            ?? new MonacoEditorConfiguration(null);

        await base.OnInitializedAsync();
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        var options = Config?.Options ?? new StandaloneEditorConstructionOptions();

        options.Value = GetValueAsString();

        return options;
    }

    private bool loading;
    private bool queued;

    private async Task ChangedAsync(KeyboardEvent args)
    {
        if (Editor == null)
        {
            return;
        }

        if (loading)
        {
            queued = true;
            return;
        }

        do
        {
            loading = true;
            queued = false;
            await SetValueFromStringAsync(await Editor.GetValue());
            loading = false;
        }
        while (queued);

        await InvokeAsync(StateHasChanged);
    }
}